name: Quality Metrics Pipeline

on:
  push:
    branches:
      - master

jobs:
  quality-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install Depcheck
        run: npm install -g depcheck

      - name: Run Depcheck
        run: |
          depcheck --json > depcheck-results.json || true

      - name: Send Depcheck results to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: Depcheck' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @depcheck-results.json

      - name: Install GitLeaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.24.3/gitleaks_8.24.3_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/gitleaks

      - name: Run GitLeaks
        run: |
          gitleaks detect \
            --source=. \
            --report-format json \
            --report-path=gitleaks.json \
            --no-git
        continue-on-error: true

      - name: Send GitLeaks results to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: GitLeaks' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @gitleaks.json

      - name: Run Jest Tests
        run: |
          npx jest --coverage --outputFile=jest-results.json --json

      - name: Send Jest results to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: Jest' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @jest-results.json

      - name: Install SonarScanner
        run: |
          npm install -g sonarqube-scanner

      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Wait for SonarQube Analysis to Complete
        run: |
          echo 'Waiting for SonarQube analysis...' && \
          while true; do \
            STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/ce/component?component=${{ secrets.SONAR_PROJECT_KEY }}" | jq -r '.current.status'); \
            echo "Current SonarQube status: $STATUS"; \
            if [ "$STATUS" = "SUCCESS" ] || [ "$STATUS" = "FAILED" ]; then break; fi; \
            sleep 5; \
          done

      - name: Fetch SonarQube Metrics
        run: |
          curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=${{ secrets.SONAR_PROJECT_KEY }}&metricKeys=code_smells,complexity,cognitive_complexity,duplicated_lines_density,coverage" \
            -o sonar-results.json

      - name: Send SonarQube results to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: SonarQube' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @sonar-results.json

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Install CycloneDX SBOM Generator
        run: |
          npm install --save-dev @cyclonedx/cyclonedx-npm

      - name: Generate SBOM (CycloneDX JSON)
        run: |
          npx cyclonedx-npm --output-format json > bom.json

      - name: Run Trivy on SBOM (licenses + CVEs)
        run: |
          trivy sbom --scanners vuln,license --format json --output trivy-results.json bom.json

      - name: Send Trivy results to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: Trivy' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @trivy-results.json

      - name: Fetch JIRA Sprint Story Points
        run: |
          STORY_POINTS_FIELD="customfield_10016"
          echo "Using Story Points field: $STORY_POINTS_FIELD"

          echo "Fetching completed sprints..."
          completed_sprints=$(curl -s -u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_TOKEN }} \
            "${{ secrets.JIRA_URL }}/rest/agile/1.0/board/${{ secrets.JIRA_BOARD }}/sprint?state=closed" | jq '.values')

          echo "$completed_sprints" > sprints.json

          results="[]"

          echo "Processing sprints..."
          for row in $(echo "$completed_sprints" | jq -r '.[] | @base64'); do
            _jq() {
              echo "${row}" | base64 --decode | jq -r "${1}"
            }

            sprint_id=$(_jq '.id')
            sprint_name=$(_jq '.name')

            echo "Sprint: $sprint_name (ID: $sprint_id)"
            issues_url="${{ secrets.JIRA_URL }}/rest/agile/1.0/sprint/$sprint_id/issue"
            echo "Fetching issues from: $issues_url"

            issues_response=$(curl -s -u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_TOKEN }} "$issues_url")
            echo "$issues_response" > issues_raw.json

            issues=$(echo "$issues_response" | jq '.issues')

            total_estimated=0
            total_completed=0

            while IFS= read -r issue; do
              estimate=$(echo "$issue" | jq -r ".fields[\"$STORY_POINTS_FIELD\"] // 0")
              status=$(echo "$issue" | jq -r ".fields.status.name")

              total_estimated=$(echo "$total_estimated + $estimate" | bc)
              if [[ "$status" == "Gereed" ]]; then
                total_completed=$(echo "$total_completed + $estimate" | bc)
              fi
            done < <(echo "$issues" | jq -c '.[]')

            result_entry="{\"sprint\":\"$sprint_name\",\"estimated\":$total_estimated,\"completed\":$total_completed}"
            results=$(echo "$results" | jq ". + [${result_entry}]")
          done

          echo "$results" > sprint_points.json

      - name: Send Sprint Points to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: Jira-SprintPoints' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @sprint_points.json

      - name: Fetch Epics from JIRA
        run: |
          echo "Fetching epics from JIRA..."

          epics=$(curl -s -u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_TOKEN }} \
            -G --data-urlencode "jql=issuetype=Epic" \
            "${{ secrets.JIRA_URL }}/rest/api/2/search?fields=key,summary,labels")

          echo "$epics" > epics.json

      - name: Send Epics to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: Jira-Security-Epics' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @epics.json

      - name: Fetch Security Incidents Created During Sprint
        run: |
          echo "Fetching current active sprint..."

          active_sprint=$(curl -s -u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_TOKEN }} \
            "${{ secrets.JIRA_URL }}/rest/agile/1.0/board/${{ secrets.JIRA_BOARD }}/sprint?state=active" | jq '.values[0]')

          sprint_id=$(echo "$active_sprint" | jq -r '.id')
          sprint_name=$(echo "$active_sprint" | jq -r '.name')
          start_date=$(echo "$active_sprint" | jq -r '.startDate' | cut -d'T' -f1)
          end_date=$(echo "$active_sprint" | jq -r '.endDate' | cut -d'T' -f1)

          if [ -z "$start_date" ] || [ -z "$end_date" ]; then
            echo "Sprint dates not found. Exiting early."
            exit 1
          fi

          echo "Active sprint: $sprint_name (ID: $sprint_id)"
          echo "Start: $start_date"
          echo "End:   $end_date"

          echo "Fetching security incidents created during sprint timeframe..."

          incidents=$(curl -s -u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_TOKEN }} \
            -G --data-urlencode "jql=labels in (\"security-incident\", \"vulnerability\") AND created >= \"$start_date\" AND created <= \"$end_date\"" \
            "${{ secrets.JIRA_URL }}/rest/api/2/search?fields=key,summary,created")

          echo "$incidents" > security_incidents.json

      - name: Send Security Incidents to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: Jira-Security-Incidents' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @security_incidents.json

      - name: Fetch JIRA Bugs
        run: |
          echo "Fetching issues of type 'Bug' from JIRA..."
          bugs=$(curl -s -u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_TOKEN }} \
            -G --data-urlencode "jql=issuetype=Bug" \
            "${{ secrets.JIRA_URL }}/rest/api/2/search?fields=key,summary,created")

          echo "$bugs" > jira_bugs.json

      - name: Count LOC for Defect Density
        run: |
          echo "Counting lines of code in ./src..."
          loc=$(find ./src -type f \( -name '*.ts' -o -name '*.js' -o -name '*.tsx' -o -name '*.jsx' \) | xargs wc -l | tail -n 1 | awk '{print $1}')
          kloc=$(echo "scale=2; $loc / 1000" | bc)

          echo "{ \"loc\": $loc, \"kloc\": $kloc }" > loc.json

      - name: Merge Defect Density Inputs
        run: |
          jq -s '.[0] * .[1]' jira_bugs.json loc.json > defect_density.json

      - name: Send Defect Density Data to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: Jira-Defect-Density' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @defect_density.json

      - name: Fetch Programming Language Breakdown
        run: |
          echo "Fetching language breakdown from GitHub API..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/languages \
            -o languages.json

      - name: Send Language Energy Impact to API
        run: |
          curl -X POST https://6d888b3b7a17.ngrok-free.app/api/metrics \
            -H 'Content-Type: application/json' \
            -H 'X-Tool-Name: Language-Impact' \
            -H 'X-Repo-Name: https://github.com/mennokonijn/unit-test-examples' \
            --data @languages.json
