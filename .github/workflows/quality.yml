name: Quality Metrics Pipeline

on:
  push:
    branches:
      - master

jobs:
  quality-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

#      - name: Install dependencies
#        run: npm install

      - name: Fetch JIRA Sprint Story Points
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_BOARD_ID: '1'
        run: |
          STORY_POINTS_FIELD="customfield_10016"
          echo "Using Story Points field: $STORY_POINTS_FIELD"

          echo "Fetching completed sprints..."
          completed_sprints=$(curl -s -u "$JIRA_EMAIL:$JIRA_TOKEN" \
            "$JIRA_URL/rest/agile/1.0/board/$JIRA_BOARD_ID/sprint?state=closed" | jq '.values')

          echo "$completed_sprints" > sprints.json

          results="[]"

          echo "Processing sprints..."
          for row in $(echo "$completed_sprints" | jq -r '.[] | @base64'); do
            _jq() {
              echo "${row}" | base64 --decode | jq -r "${1}"
            }

            sprint_id=$(_jq '.id')
            sprint_name=$(_jq '.name')

            echo "Sprint: $sprint_name (ID: $sprint_id)"
            issues_url="$JIRA_URL/rest/agile/1.0/sprint/$sprint_id/issue"
            echo "Fetching issues from: $issues_url"

            issues_response=$(curl -s -u "$JIRA_EMAIL:$JIRA_TOKEN" "$issues_url")
            echo "$issues_response" > issues_raw.json

            issues=$(echo "$issues_response" | jq '.issues')

            total_estimated=0
            total_completed=0

            while IFS= read -r issue; do
              estimate=$(echo "$issue" | jq -r ".fields[\"$STORY_POINTS_FIELD\"] // 0")
              status=$(echo "$issue" | jq -r ".fields.status.name")

              total_estimated=$(echo "$total_estimated + $estimate" | bc)
              if [[ "$status" == "Gereed" ]]; then
                total_completed=$(echo "$total_completed + $estimate" | bc)
              fi
            done < <(echo "$issues" | jq -c '.[]')

            result_entry="{\"sprint\":\"$sprint_name\",\"estimated\":$total_estimated,\"completed\":$total_completed}"
            results=$(echo "$results" | jq ". + [$result_entry]")
          done

          echo "$results" > sprint_points.json

      - name: Send Sprint Points to API
        run: |
          echo "ðŸš€ Sending metrics to API..."
          curl -X POST https://ef02-144-178-66-36.ngrok-free.app/api/metrics \
            -H "Content-Type: application/json" \
            -H "X-Tool-Name: Jira-SprintPoints" \
            -H "X-Repo-Name: https://github.com/mennokonijn/unit-test-examples" \
            --data @sprint_points.json


#      - name: Install GitLeaks
#        run: |
#          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.24.3/gitleaks_8.24.3_linux_x64.tar.gz -o gitleaks.tar.gz
#          tar -xzf gitleaks.tar.gz
#          chmod +x gitleaks
#          sudo mv gitleaks /usr/local/bin/gitleaks
#
#
#      - name: Run Trivy Scan
#        uses: aquasecurity/trivy-action@master
#        with:
#          scan-type: fs
#          scan-ref: .
#          format: json
#          output: trivy-results.json
#
#      - name: Send Trivy results to API
#        run: |
#          curl -X POST https://ef02-144-178-66-36.ngrok-free.app/api/metrics \
#          -H "Content-Type: application/json" \
#          -H "X-Tool-Name: Trivy" \
#          -H "X-Repo-Name: https://github.com/mennokonijn/unit-test-examples" \
#          --data @trivy-results.json
#
#
#      - name: Run GitLeaks
#        run: |
#          echo "[allowlist]
#          description = \"Exclude common non-source directories\"
#          paths = [
#          '''\\.cache/''',
#          '''node_modules/''',
#          '''dist/'''
#          ]" > .gitleaks.toml
#
#          gitleaks detect \
#          --source=. \
#          --config=.gitleaks.toml \
#          --report-format json \
#          --report-path=gitleaks.json \
#          --no-git
#        continue-on-error: true
#
#      - name: Send GitLeaks results to API
#        run: |
#          curl -X POST https://ef02-144-178-66-36.ngrok-free.app/api/metrics \
#          -H "Content-Type: application/json" \
#          -H "X-Tool-Name: GitLeaks" \
#          -H "X-Repo-Name: https://github.com/mennokonijn/unit-test-examples" \
#          --data @gitleaks.json
#
#
#      - name: Run Jest Tests
#        run: |
#          npx jest --coverage --outputFile=jest-results.json --json
#
#
#      - name: Send Jest results to API
#        run: |
#          curl -X POST https://ef02-144-178-66-36.ngrok-free.app/api/metrics \
#          -H "Content-Type: application/json" \
#          -H "X-Tool-Name: Jest" \
#          -H "X-Repo-Name: https://github.com/mennokonijn/unit-test-examples" \
#          --data @jest-results.json
#
#
#      - name: Install SonarScanner
#        run: |
#          npm install -g sonarqube-scanner
#
#
#      - name: Run SonarQube Analysis
#        run: |
#          sonar-scanner \
#          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
#          -Dsonar.sources=src \
#          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
#          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#
#
#      - name: Wait for SonarQube Analysis to Complete
#        run: |
#          echo "Waiting for SonarQube analysis..." && \
#          while true; do \
#          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/ce/component?component=${{ secrets.SONAR_PROJECT_KEY }}" | jq -r '.current.status'); \
#          echo "Current SonarQube status: $STATUS"; \
#          if [ "$STATUS" = "SUCCESS" ] || [ "$STATUS" = "FAILED" ]; then break; fi; \
#          sleep 5; \
#          done
#
#
#      - name: Fetch SonarQube Metrics
#        run: |
#          curl -s -u ${{ secrets.SONAR_TOKEN }}: \
#          "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=${{ secrets.SONAR_PROJECT_KEY }}&metricKeys=code_smells,complexity,cognitive_complexity,duplicated_lines_density,coverage" \
#          -o sonar-results.json
#
#
#      - name: Send SonarQube results to API
#        run: |
#          curl -X POST https://ef02-144-178-66-36.ngrok-free.app/api/metrics \
#          -H "Content-Type: application/json" \
#          -H "X-Tool-Name: SonarQube" \
#          -H "X-Repo-Name: https://github.com/mennokonijn/unit-test-examples" \
#          --data @sonar-results.json
